#!/usr/bin/env node

/**
 * Grammar Template Generator
 * 
 * Generates grammar/notation.pest from templates and system configurations.
 * This ensures all notation systems have complete, type-safe grammar rules.
 */

const fs = require('fs');
const path = require('path');

const BASE_DIR = path.join(__dirname, '..');
const GRAMMAR_DIR = path.join(BASE_DIR, 'grammar');
const MAIN_TEMPLATE = path.join(GRAMMAR_DIR, 'notation.pest.template');
const SYSTEM_TEMPLATE = path.join(GRAMMAR_DIR, 'system-specific.template');
const SYSTEMS_CONFIG = path.join(GRAMMAR_DIR, 'systems.json');
const OUTPUT_FILE = path.join(GRAMMAR_DIR, 'notation.pest');

console.log('üéº Generating notation.pest from templates...');

// Read configuration and templates
let config, mainTemplate, systemTemplate;

try {
    config = JSON.parse(fs.readFileSync(SYSTEMS_CONFIG, 'utf8'));
    mainTemplate = fs.readFileSync(MAIN_TEMPLATE, 'utf8');
    systemTemplate = fs.readFileSync(SYSTEM_TEMPLATE, 'utf8');
} catch (error) {
    console.error('‚ùå Error reading template files:', error.message);
    process.exit(1);
}

// Generate system-specific rules for each notation system
let systemSpecificRules = '';

for (const [systemName, systemConfig] of Object.entries(config.systems)) {
    console.log(`üìù Generating rules for ${systemName} notation...`);
    
    let systemRules = systemTemplate;
    
    // Replace template variables
    systemRules = systemRules
        .replace(/\{\{SYSTEM\}\}/g, systemName)
        .replace(/\{\{PITCH_RULE\}\}/g, systemConfig.pitch_rule)
        .replace(/\{\{DESCRIPTION\}\}/g, systemConfig.description);
    
    systemSpecificRules += `\n// ${systemConfig.description}\n`;
    systemSpecificRules += systemRules + '\n';
}

// Generate the final grammar file
let finalGrammar = mainTemplate.replace('{{SYSTEM_SPECIFIC_RULES}}', systemSpecificRules);

// Add generation timestamp
const timestamp = new Date().toISOString();
finalGrammar = finalGrammar.replace(
    'Generated by: scripts/generate_grammar.js',
    `Generated by: scripts/generate_grammar.js at ${timestamp}`
);

// Write the output file
try {
    fs.writeFileSync(OUTPUT_FILE, finalGrammar);
    console.log(`‚úÖ Successfully generated ${OUTPUT_FILE}`);
    
    // Show statistics
    const lines = finalGrammar.split('\n').length;
    const systems = Object.keys(config.systems).length;
    console.log(`üìä Generated ${lines} lines for ${systems} notation systems`);
    
    // List generated systems
    console.log('üéµ Notation systems:');
    for (const [name, config] of Object.entries(config.systems)) {
        console.log(`   ‚Ä¢ ${name}: ${config.description}`);
    }
    
} catch (error) {
    console.error('‚ùå Error writing output file:', error.message);
    process.exit(1);
}