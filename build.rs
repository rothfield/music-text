// Build script to generate character widths at compile time
use std::env;
use std::fs;
use std::path::Path;

fn main() {
    println!("cargo:rerun-if-changed=build.rs");

    // Generate character width constants
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("char_widths.rs");

    let char_widths = measure_all_character_widths();
    fs::write(&dest_path, char_widths).expect("Failed to write char_widths.rs");

    println!("cargo:rustc-cfg=has_char_widths");
}

fn measure_all_character_widths() -> String {
    let mut output = String::new();
    output.push_str("// Auto-generated character width measurements\n");
    output.push_str("// DO NOT EDIT - generated by build.rs\n\n");

    // For now, use reasonable estimates for Inter font at 22.4px
    // TODO: Replace with actual font measurement once build issues are resolved
    let measurements = generate_inter_estimates();

    output.push_str(&format!("pub const CHAR_WIDTHS: &[(char, f32)] = &[\n"));

    for (ch, width) in measurements {
        if ch.is_ascii_control() {
            continue; // Skip control characters
        }
        output.push_str(&format!("    ('{}', {:.2}),\n",
            if ch == '\'' { "\\'" } else if ch == '\\' { "\\\\" } else { &ch.to_string() },
            width));
    }

    output.push_str("];\n\n");

    // Generate lookup function
    output.push_str("pub fn get_char_width(c: char) -> f32 {\n");
    output.push_str("    CHAR_WIDTHS.iter()\n");
    output.push_str("        .find(|(ch, _)| *ch == c)\n");
    output.push_str("        .map(|(_, width)| *width)\n");
    output.push_str("        .unwrap_or(13.44) // Default monospace width\n");
    output.push_str("}\n");

    output
}


fn generate_inter_estimates() -> Vec<(char, f32)> {
    let mut measurements = Vec::new();

    // Inter font measurements at 22.4px (proportional widths)
    // More accurate measurements based on Inter font metrics
    for i in 32..=126 {
        let ch = char::from(i as u8);
        let width = match ch {
            // Very narrow characters (Inter is quite condensed)
            'i' | 'l' => 6.2,
            'I' => 7.4,
            'j' | 't' | 'f' => 7.8,
            '!' | '|' | '\'' | '`' => 6.4,
            'r' => 8.1,   // r is narrower in Inter
            '.' | ',' => 6.2,
            ':' | ';' => 6.7,
            ' ' => 6.0,  // Inter has tight spacing

            // Wide characters
            'M' | 'W' => 18.4,
            'm' | 'w' => 17.1,
            '@' => 19.2,
            'G' | 'O' | 'Q' | 'D' => 15.7,

            // Numbers (Inter numbers are quite uniform)
            '0' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => 12.3,
            '1' => 10.8,  // 1 is narrower

            // Uppercase letters
            'A' | 'H' | 'K' | 'N' | 'R' | 'T' | 'U' | 'V' | 'X' | 'Y' | 'Z' => 13.9,
            'B' | 'E' | 'F' | 'L' | 'P' | 'S' => 12.8,
            'C' => 13.5,
            'J' => 11.0,

            // Lowercase letters
            'a' | 'e' | 'o' | 's' => 11.4,
            'b' | 'd' | 'g' | 'h' | 'k' | 'n' | 'p' | 'q' | 'u' => 12.1,
            'c' => 11.0,
            'v' | 'x' | 'y' | 'z' => 10.8,

            // Special characters
            '-' | '–' => 9.2,  // Dash widths
            '(' | ')' | '[' | ']' | '{' | '}' => 7.6,
            '/' | '\\' => 8.8,
            '+' | '=' => 12.6,
            '*' => 10.2,
            '#' => 13.7,

            // Default for other characters
            _ => 11.5,
        };
        measurements.push((ch, width));
    }

    // Musical symbols and special characters
    let musical_symbols = [
        ('𝄀', 3.2),   // Single barline (very thin)
        ('𝄁', 8.5),   // Final barline (thick+thin)
        ('𝄆', 12.0),  // Repeat start
        ('𝄇', 12.0),  // Repeat end
        ('‖', 6.4),   // Double barline
        ('♯', 8.8),   // Sharp
        ('♭', 8.2),   // Flat
        ('♮', 8.0),   // Natural
        ('•', 5.8),   // Octave dot (bullet)
        ('ʻ', 4.5),   // Breath mark
        ('⌐', 10.2),  // Rest symbol
        ('~', 12.1),  // Trill
        ('∿', 11.8),  // Mordent
    ];

    measurements.extend(musical_symbols.iter().cloned());
    measurements
}