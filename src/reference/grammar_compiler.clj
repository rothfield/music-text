(ns doremi-script.grammar-compiler
  (:require	
    [clojure.string :as string :only [join replace]]
    [clojure.java.io :as io :refer [resource]]
    ))

(defn compile-grammars
  "run (compile-grammars) to regenerate the grammar
  Compiles grammars based on resources/grammar/main.ebn , resources/grammar/template.ebn, and
  Files in resources/grammar/notation_systems/ "
  []
  (let [
        target "resources/doremiscript.ebnf" 
        notation-system-files-path "grammar/notation_systems/"
        notation-system-files 
        (->> notation-system-files-path
             resource io/file
             file-seq 
             (filter (fn[^java.io.File x] (.endsWith (.getName x) ".ebnf"))))
        notation-system-names (map (fn[^java.io.File x] (clojure.string/replace (.getName x) ".ebnf" ""))
                                   notation-system-files)
        template (-> "grammar/template.ebnf" resource slurp)
        ]
    (spit (io/file target)
          (->
            (str
              "(* DO NOT EDIT. This file was generated by the Clojure code compile-grammar *)\n"

              "composition =  " (clojure.string/join "|" (map (fn[x](str x "-composition")) notation-system-names)))
            (str (-> "grammar/main.ebnf" resource slurp))
            (str (clojure.string/join "\n(** Generated from template.ebnf. Do not edit **)"
                                      (->> notation-system-names (map  (fn[x] (string/replace template "doremi" x))
                                                                      ))))
            (str (clojure.string/join "\n"
                                      (->> notation-system-files (map  (fn[^java.io.File x](str "(**" (.getName x) "**)\n" (slurp x))))
                                           )))))
    (println "created" target " using main.ebnf, template.ebnf, and ebnf files in " notation-system-files-path) 
    ;; TODO: test grammar ?????
    ))
